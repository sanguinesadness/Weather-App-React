{"version":3,"sources":["Components/Header.jsx","Components/Footer.jsx","Components/CitySelector.jsx","Components/ThemeSelector.jsx","Icons/test.svg","Components/WeatherCard.jsx","Components/WeatherCards.jsx","Components/DetailedCards/BriefInfoCard.jsx","Components/DetailedCards/TemperatureCard.jsx","Components/DetailedCards/WindCard.jsx","Components/DetailedCards/AirCard.jsx","Components/DetailedCards/LocationCard.jsx","Components/DetailedCards/OtherCard.jsx","Components/SelectedCityDateLabel.jsx","Components/DetailedInfo.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","monthNames","dateNow","Date","date","extractDate","time","extractTime","useState","day","setDay","month","setMonth","hours","setHours","minutes","setMinutes","dayPart","setDayPart","toLocaleTimeString","hour","minute","hoursResult","substring","charAt","minutesResult","length","getDate","getMonth","setInterval","updateDateTime","className","Footer","getFullYear","target","rel","href","CitySelector","selectedCity","setSelectedCity","setFetchData","selectorVisible","setSelectorVisible","cityList","setCityList","userInput","setUserInput","ref","wrapperRef","useRef","getCityFullname","city","name","country","state","useEffect","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","onClick","type","placeholder","value","onChange","e","inputValue","currentTarget","includes","replace","cities","filter","toLowerCase","filterCityList","trim","map","id","ThemeSelector","appThemes","appTheme","setAppTheme","checked","light","dark","WeatherCard","card","setSelectedCard","appGitName","settings","to","src","forecast","weather","icon","Math","round","parseInt","temp","max","specialDayName","WeatherCards","apiKey","cityId","amount","fetchData","currentForecast","cards","setCards","loading","setLoading","fetchForecast","a","fetch","response","json","dates","getFutureDates","i","list","isDateToday","isDateTomorrow","allInfo","push","targetDate","year","setDate","today","updateWeatherCards","BriefInfo","iconId","temperature","description","toUpperCase","slice","TemperatureTable","feels_like","mobileScreen","useMediaQuery","maxWidth","morn","eve","night","WindCard","speed","direction","gust","parseFloat","toFixed","AirCard","humidity","pressure","LocationCard","longitude","latitude","OtherCard","clouds","precipitation","SelectedCityDateLabel","cityName","DetailedInfo","narrowScreen","maxHeight","wideScreen","minWidth","mediumScreen","smallScreen","BriefInfoCard","TemperatureCard","coord","lon","lat","deg","pop","App","Object","freeze","selectedCard","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.259423e4.chunk.js","sourcesContent":["import React from 'react'\nimport { useState } from 'react';\n\nconst Header = ({monthNames}) => {\n    // initial DateTime values\n    let dateNow = new Date();\n\n    const date = extractDate(dateNow);\n    const time = extractTime(dateNow);\n\n    const [day, setDay] = useState(date.day);\n    const [month, setMonth] = useState(monthNames[date.month]);\n\n    const [hours, setHours] = useState(time.hours);\n    const [minutes, setMinutes] = useState(time.minutes);\n    const [dayPart, setDayPart] = useState(time.dayPart);\n\n    // update DateTime values\n    function updateDateTime() {\n        dateNow = new Date();\n\n        const date = extractDate(dateNow);\n        const time = extractTime(dateNow);\n\n        setDay(date.day);\n        setMonth(monthNames[date.month]);\n        setHours(time.hours);\n        setMinutes(time.minutes);\n        setDayPart(time.dayPart);\n    }\n\n    // extracts Time from Date object in appropriate format\n    function extractTime(date) {\n        const hours = date.toLocaleTimeString(\"en-US\", { hour: \"2-digit\"});\n        const minutes = date.toLocaleTimeString(\"en-US\", { minute: \"2-digit\"});\n\n        let hoursResult = hours.substring(0, 2);\n        if (hoursResult.charAt(0) === \"0\") {\n            hoursResult = hoursResult.substring(1);\n        }\n\n        let minutesResult = minutes;\n        if (minutes < 10) {\n            minutesResult = \"0\" + minutes;\n        }\n\n        const result = {\n            hours: hoursResult,\n            minutes: minutesResult,\n            dayPart: hours.substring(hours.length - 2)\n        };\n\n        return result;\n    }\n\n    // extracts Date from Date object in appropriate format\n    function extractDate(date) {\n        const day = date.getDate();\n        const month = date.getMonth();\n\n        const result = {\n            day: day,\n            month: month\n        };\n\n        return result;\n    }\n\n    // update DateTime values every 1 sec\n    setInterval(() => {\n        updateDateTime();\n    }, 1000);\n\n    return (\n        <header className=\"header\">\n            <h1>10 day forecast</h1>\n            <h2 className=\"date-time\">\n                {month} {day}, {hours}<span className=\"separator\">:</span>{minutes} {dayPart}\n            </h2>\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\n\nconst Footer = () => {\n    return (\n        <footer className=\"footer\">\n            <h3 className=\"credits\">Rustam, {new Date().getFullYear()} &copy;</h3>\n            <a className=\"arrow-link underline\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/sanguinesadness/Weather-App-React\">GitHub</a>\n        </footer>\n    )\n}\n\nexport default Footer\n","import React from 'react'\nimport { useState, useEffect, useRef } from 'react'\nimport { BsChevronDown } from 'react-icons/bs'\nimport cities from '../cities.json';\n\nconst CitySelector = ({selectedCity, setSelectedCity, setFetchData}) => {\n    const [selectorVisible, setSelectorVisible] = useState(false);\n    const [cityList, setCityList] = useState([]);\n    const [userInput, setUserInput] = useState('');\n\n    function useOutsideAlerter(ref) {\n        useEffect(() => {\n            // if clicked on outside of element\n            function handleClickOutside(event) {\n                if (ref.current && !ref.current.contains(event.target)) {\n                    setSelectorVisible(false);\n                }\n            }\n    \n            // bind the event listener\n            document.addEventListener(\"click\", handleClickOutside);\n            return () => {\n                // unbind the event listener on clean up\n                document.removeEventListener(\"click\", handleClickOutside);\n            };\n        }, [ref]);\n    }\n\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef);\n\n    function filterCityList(userInput) {\n        if (!userInput || userInput.length < 3) {\n            return;\n        }\n\n        setCityList(cities.filter(city => city.name.toLowerCase().includes(userInput.toLowerCase())));\n    }\n\n    function getCityFullname(city) {\n        return `${city.name}, ${city.country}${city.state ? ', ' + city.state : ''}`;\n    }\n\n    return (\n        <div className=\"city-selector\" ref={wrapperRef}>\n            <div className=\"selected-city active button with-icon\" onClick={() => setSelectorVisible(!selectorVisible)}>\n                <BsChevronDown/>\n                <span>{selectedCity ? getCityFullname(selectedCity) : \"No city selected\"}</span>\n            </div>\n            {selectorVisible ?\n                <div className=\"selector\">\n                    <input type=\"text\" placeholder=\"Find City\" \n                            value={userInput}\n                            onChange={(e) => {\n                                let inputValue = e.currentTarget.value;\n\n                                // prevent double space input\n                                while (inputValue.includes(\"  \"))\n                                {\n                                    inputValue = inputValue.replace(\"  \", \" \");\n                                }\n\n                                filterCityList(inputValue.trim());\n                                setUserInput(inputValue);\n                            }}/>\n                    <div className=\"city-list__wrapper\">\n                        <div className=\"city-list\">\n                            {\n                                cityList.length > 0 ? cityList.map(city =>\n                                    <span className={selectedCity && selectedCity.id === city.id ? \"city selected\" : \"city\"}\n                                          key={city.id} \n                                          onClick={() => {\n                                              setSelectedCity(city);\n                                              setSelectorVisible(false);\n                                              setFetchData(true)}}>\n                                        {getCityFullname(city)}\n                                    </span>\n                                )\n                                : <span className=\"city-list-message\">\n                                    {userInput.length == 0 ? \"Empty input\" :\n                                        userInput.length < 3 ? \"3 characters min\" :\n                                            \"Not found\"}\n                                </span>\n                            }\n                        </div>\n                    </div>\n                </div>\n                :\n                <></>\n            }\n        </div>\n    )\n}\n\nexport default CitySelector\n","import React from 'react'\n\nconst ThemeSelector = ({ appThemes, appTheme, setAppTheme }) => {\n    return (\n        <div className=\"theme-selector\">\n            <span>Style:</span>\n            <input type=\"radio\" name=\"theme-selector-radio\" value=\"Light\" \n                   checked={appTheme === appThemes.light} \n                   onChange={() => setAppTheme(appThemes.light)}/>\n            <input type=\"radio\" name=\"theme-selector-radio\" value=\"Dark\" \n                   checked={appTheme === appThemes.dark} \n                   onChange={() => setAppTheme(appThemes.dark)}/>\n        </div>\n    )\n}\n\nexport default ThemeSelector\n","export default __webpack_public_path__ + \"static/media/test.28b7da0c.svg\";","import React from 'react'\nimport testIcon from '../Icons/test.svg'\nimport settings from '../../package.json'\nimport { Link } from 'react-router-dom';\n\nconst WeatherCard = ({ card, setSelectedCard }) => {\n    const appGitName = settings['git-name'];\n\n    return (\n        <Link to={`/${appGitName}/detailed`} className=\"weather-card card\" onClick={() => setSelectedCard(card)}>\n            <img className=\"icon\" src={`http://openweathermap.org/img/wn/${card.forecast.weather[0].icon}@4x.png`}></img>\n            <span className=\"info\">\n                <span className=\"temperature\">{Math.round(parseInt(card.forecast.temp.max))}</span>\n                <span className=\"day\">\n                    {card.specialDayName ? card.specialDayName : `${card.date.day} ${card.date.month}`}\n                </span>\n            </span>\n        </Link>\n    )\n}\n\nexport default WeatherCard\n","import React from 'react'\nimport WeatherCard from './WeatherCard'\nimport ReactLoading from 'react-loading'\nimport { useState, useEffect } from 'react';\nimport { BsFillInfoSquareFill } from 'react-icons/bs'\n\nconst WeatherCards = ({apiKey, cityId, amount, monthNames, setSelectedCard, fetchData, currentForecast}) => {\n    if (amount < 1) {\n        amount = 1;\n    }\n    else if (amount > 16) {\n        amount = 16;\n    }\n\n    const [cards, setCards] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        if (cityId > 0) {\n            updateWeatherCards()\n        }\n    }, []);\n\n    // get Forecast from OpenWeatherMap API\n    async function fetchForecast() {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast/daily?id=${cityId}&units=metric&cnt=${amount}&appid=${apiKey}`);\n        return response.json();\n    }\n\n    async function updateWeatherCards() {\n        let forecast;\n\n        // if fetch is not needed then use current forecast info\n        if (!fetchData && currentForecast) {\n            forecast = currentForecast;\n        }\n        else {\n            try {\n                forecast = await fetchForecast();\n            }\n            catch(exception) {\n                setCards(null);\n                return;\n            }\n        }\n\n        const cards = [];\n        const dates = getFutureDates();\n\n        for (let i = 0; i < amount; i++) {\n            const card = {\n                id: i,\n                date: dates[i],\n                forecast: forecast.list[i],\n                specialDayName: isDateToday(dates[i]) ? \"Today\" : isDateTomorrow(dates[i]) ? \"Tomorrow\" : \"\",\n                allInfo: forecast\n            };\n\n            cards.push(card);\n        }\n\n        setCards(cards);\n        setLoading(false);\n    }\n\n    function getFutureDates() {\n        var targetDate = new Date();\n\n        const dates = [];\n\n        for (let i = 0; i < amount; i++) {\n            const date = {\n                day: targetDate.getDate(),\n                month: monthNames[targetDate.getMonth()],\n                year: targetDate.getFullYear()\n            };\n\n            dates.push(date);\n\n            targetDate.setDate(targetDate.getDate() + 1);\n        }\n\n        return dates;\n    }\n\n    function isDateToday(date) {\n        const today = new Date();\n\n        const day = today.getDate();\n        const month = monthNames[today.getMonth()];\n        const year = today.getFullYear();\n\n        return day === date.day && month === date.month && year == date.year;\n    }\n\n    function isDateTomorrow(date) {\n        const today = new Date();\n        today.setDate(today.getDate() + 1);\n\n        const day = today.getDate();\n        const month = monthNames[today.getMonth()];\n        const year = today.getFullYear();\n\n        return day === date.day && month === date.month && year == date.year;\n    }\n\n    return (\n        <div className=\"weather-cards__wrapper\">\n            {\n                cityId <= 0 ?\n                <div className=\"select-city-message\">\n                    <BsFillInfoSquareFill className=\"icon\"/>\n                    <span className=\"text\">Select a city to view weather forecast.</span>\n                </div>\n                : !cards ?\n                <div className=\"error-message\">\n                    <BsFillInfoSquareFill className=\"icon\"/>\n                    <span className=\"text\">\n                        Unknown error thrown.\n                        <br/>\n                        Please check your Internet connection and try again.\n                    </span>\n                </div>\n                : loading ? \n                <ReactLoading type=\"bars\" className=\"loading-spinner\"/>\n                :\n                <div className=\"weather-cards\">\n                    {\n                        cards.map(card =>\n                            <WeatherCard key={card.id} card={card} setSelectedCard={setSelectedCard}/>\n                        )\n                    }\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default WeatherCards\n","import React from 'react'\n\nconst BriefInfo = ({iconId, temperature, description}) => {\n    return (\n        <div className=\"brief-info card\">\n            <img className=\"icon\" src={`http://openweathermap.org/img/wn/${iconId}@4x.png`}></img>\n            <span className=\"info\">\n                <span className=\"temp-block\">\n                    <span className=\"temperature\">{temperature}</span>\n                    <span className=\"info-label\">max</span>\n                </span>\n                <span className=\"description\">{description.charAt(0).toUpperCase() + description.slice(1)}</span>\n            </span>\n        </div>\n    )\n}\n\nexport default BriefInfo\n","import React from 'react'\nimport { FiSunrise, FiSun, FiSunset, FiMoon } from 'react-icons/fi'\nimport MediaQuery, { useMediaQuery } from 'react-responsive'\n\nconst TemperatureTable = ({temp, feels_like}) => {\n    const mobileScreen = useMediaQuery({ maxWidth: 630 });\n\n    return (\n        <div className=\"temperature-info card\">\n            <table className=\"temperature-table\">\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>Temp{mobileScreen ? \"\" : \", °C\"}</th>\n                        <th>Feel{mobileScreen ? \"\" : \"s like, °C\"}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td className=\"with-icon\">\n                            <FiSunrise/>\n                            <span>Morning</span>\n                        </td>\n                        <td>{parseInt(temp.morn)}</td>\n                        <td>{parseInt(feels_like.morn)}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"with-icon\">\n                            <FiSun/>\n                            <span>Day</span>\n                        </td>\n                        <td>{parseInt(temp.day)}</td>\n                        <td>{parseInt(feels_like.day)}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"with-icon\">\n                            <FiSunset/>\n                            <span>Evening</span>\n                        </td>\n                        <td>{parseInt(temp.eve)}</td>\n                        <td>{parseInt(feels_like.eve)}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"with-icon\">\n                            <FiMoon/>\n                            <span>Night</span>\n                        </td>\n                        <td>{parseInt(temp.night)}</td>\n                        <td>{parseInt(feels_like.night)}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default TemperatureTable\n","import React from 'react'\n\nconst WindCard = ({ speed, direction, gust }) => {\n    return (\n        <div className=\"wind-info card\">\n            <span className=\"card-title\">Wind</span>\n            <table className=\"without-border\">\n                <tbody>\n                    <tr>\n                        <td>Speed:</td>\n                        <td>{parseFloat(speed).toFixed(2)} m/sec</td>\n                    </tr>\n                    <tr>\n                        <td>Direction:</td>\n                        <td>{parseInt(direction)} °</td>\n                    </tr>\n                    <tr>\n                        <td>Gust:</td>\n                        <td>{parseFloat(gust).toFixed(2)} m/sec</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default WindCard\n","import React from 'react'\n\nconst AirCard = ({ humidity, pressure }) => {\n    return (\n        <div className=\"air-info card\">\n            <span className=\"card-title\">Air</span>\n            <table className=\"without-border\">\n                <tbody>\n                    <tr>\n                        <td>Humidity:</td>\n                        <td>{parseInt(humidity)}%</td>\n                    </tr>\n                    <tr>\n                        <td>Pressure:</td>\n                        <td>{parseFloat(pressure)} hPA</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default AirCard\n","import React from 'react'\n\nconst LocationCard = ({ longitude, latitude }) => {\n    return (\n        <div className=\"location-info card\">\n            <span className=\"card-title\">Location</span>\n            <table className=\"without-border\">\n                <tbody>\n                    <tr>\n                        <td>Longitude:</td>\n                        <td>{parseFloat(longitude).toFixed(4)}</td>\n                    </tr>\n                    <tr>\n                        <td>Latitude:</td>\n                        <td>{parseFloat(latitude).toFixed(4)}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default LocationCard","import React from 'react'\n\nconst OtherCard = ({ clouds, precipitation }) => {\n    return (\n        <div className=\"other-info card\">\n            <span className=\"card-title\">Other</span>\n            <table className=\"without-border\">\n                <tbody>\n                    <tr>\n                        <td>Clouds:</td>\n                        <td>{parseInt(clouds)}%</td>\n                    </tr>\n                    <tr>\n                        <td>Precipitation:</td>\n                        <td>{parseInt(precipitation * 100)}%</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default OtherCard\n","import React from 'react'\n\nconst SelectedCityDateLabel = ({ cityName, date }) => {\n    return (\n        <h4 className=\"selected-city-date\">\n            <span className=\"city-name\">\n                {cityName ? cityName : \"No city selected\"}\n            </span>\n            <span className=\"separator\"> — </span>\n            <span className=\"date\">\n                {date ? `${date.month} ${date.day}, ${date.year}` : \"No card selected\"}\n            </span>\n        </h4>\n    )\n}\n\nexport default SelectedCityDateLabel\n","import React from 'react'\nimport BriefInfoCard from './DetailedCards/BriefInfoCard'\nimport TemperatureCard from './DetailedCards/TemperatureCard'\nimport WindCard from './DetailedCards/WindCard'\nimport AirCard from './DetailedCards/AirCard'\nimport LocationCard from './DetailedCards/LocationCard'\nimport OtherCard from './DetailedCards/OtherCard'\nimport SelectedCityDateLabel from './SelectedCityDateLabel'\nimport { BsFillInfoSquareFill } from 'react-icons/bs'\nimport MediaQuery, { useMediaQuery } from 'react-responsive'\n\nconst DetailedInfo = ({ forecast, city }) => {\n    const narrowScreen = useMediaQuery({ maxHeight: 820 });\n\n    const wideScreen = useMediaQuery({ minWidth: 980 });\n    const mediumScreen = useMediaQuery({ minWidth: 891, maxWidth: 979 });\n    const smallScreen = useMediaQuery({ maxWidth: 890 });\n\n    return (\n        <div className=\"detailed-info__wrapper\">\n            {   \n                forecast && city ?\n                <div className=\"detailed-info\">\n                    {\n                        narrowScreen ?\n                        <>\n                            <div className=\"one-element-row\">\n                                <BriefInfoCard iconId={forecast.weather[0].icon}\n                                    temperature={Math.round(parseInt(forecast.temp.max))}\n                                    description={forecast.weather[0].description} />\n                                <TemperatureCard temp={forecast.temp} feels_like={forecast.feels_like} />\n                                <AirCard humidity={forecast.humidity} pressure={forecast.pressure} />\n                                <LocationCard longitude={city.coord.lon} latitude={city.coord.lat} />\n                                <WindCard speed={forecast.speed} direction={forecast.deg} gust={forecast.gust} />\n                                <OtherCard clouds={forecast.clouds} precipitation={forecast.pop} />\n                            </div>\n                        </>\n                        : wideScreen ?\n                        <>\n                            <div className=\"first row\">\n                                <BriefInfoCard iconId={forecast.weather[0].icon}\n                                    temperature={Math.round(parseInt(forecast.temp.max))}\n                                    description={forecast.weather[0].description} />\n                                <TemperatureCard temp={forecast.temp} feels_like={forecast.feels_like} />\n                                <WindCard speed={forecast.speed} direction={forecast.deg} gust={forecast.gust} />\n                            </div>\n                            <div className=\"second row\">\n                                <AirCard humidity={forecast.humidity} pressure={forecast.pressure} />\n                                <LocationCard longitude={city.coord.lon} latitude={city.coord.lat} />\n                                <OtherCard clouds={forecast.clouds} precipitation={forecast.pop} />\n                            </div>\n                        </>\n                        : mediumScreen ?\n                        <>\n                            <div className=\"first row\">\n                                <BriefInfoCard iconId={forecast.weather[0].icon}\n                                    temperature={Math.round(parseInt(forecast.temp.max))}\n                                    description={forecast.weather[0].description} />\n                                <TemperatureCard temp={forecast.temp} feels_like={forecast.feels_like} />\n                            </div>\n                            <div className=\"second row\">\n                                <AirCard humidity={forecast.humidity} pressure={forecast.pressure} />\n                                <LocationCard longitude={city.coord.lon} latitude={city.coord.lat} />\n                            </div>\n                            <div className=\"third row\">\n                                <WindCard speed={forecast.speed} direction={forecast.deg} gust={forecast.gust} />\n                                <OtherCard clouds={forecast.clouds} precipitation={forecast.pop} />\n                            </div>\n                        </>\n                        : smallScreen ?\n                        <div className=\"one-element-list\">\n                            <BriefInfoCard iconId={forecast.weather[0].icon}\n                                temperature={Math.round(parseInt(forecast.temp.max))}\n                                description={forecast.weather[0].description} />\n                            <TemperatureCard temp={forecast.temp} feels_like={forecast.feels_like} />\n                            <AirCard humidity={forecast.humidity} pressure={forecast.pressure} />\n                            <LocationCard longitude={city.coord.lon} latitude={city.coord.lat} />\n                            <WindCard speed={forecast.speed} direction={forecast.deg} gust={forecast.gust} />\n                            <OtherCard clouds={forecast.clouds} precipitation={forecast.pop} />\n                        </div>\n                        :\n                        <p>Unknown display size</p>\n                    }\n                </div>\n                :\n                <div className=\"error-message\">\n                    <BsFillInfoSquareFill className=\"icon\"/>\n                    <span className=\"text\">\n                        It seems that you didn't select the city and the day!\n                        <br/>\n                        Please go Home and do it.\n                    </span>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default DetailedInfo\n","import './Styles/style.css'\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport CitySelector from './Components/CitySelector';\nimport ThemeSelector from './Components/ThemeSelector';\nimport WeatherCards from './Components/WeatherCards';\nimport DetailedInfo from './Components/DetailedInfo';\nimport SelectedCityDateLabel from './Components/SelectedCityDateLabel';\nimport MediaQuery from 'react-responsive';\nimport { useState } from 'react'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport { VscArrowLeft } from 'react-icons/vsc'\nimport settings from '../package.json'\n\nfunction App() {\n    // OpenWeather API key\n    const apiKey = \"ee8f5e36161b13d12b0e5044d2bbc117\";\n\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    const appThemes = Object.freeze({\n        light: \"light-theme\",\n        dark: \"dark-theme\"\n    });\n\n    const appGitName = settings['git-name'];\n\n    const [selectedCity, setSelectedCity] = useState();\n    const [appTheme, setAppTheme] = useState(appThemes.light);\n    const [selectedCard, setSelectedCard] = useState([]);\n\n    // indicates whether resubmission API request is needed or not\n    const [fetchData, setFetchData] = useState(true);\n\n    return (\n        <Router>\n            <div className={`main-wrapper ${appTheme}`}>\n                <div className=\"container__wrapper\">\n                    <div className=\"container\">\n                        <Header monthNames={monthNames}/>\n                        <div className=\"content\">\n                            <Route path={`/${appGitName}`} exact render={() => (\n                                <div>\n                                    <div className=\"content-header\">\n                                        <CitySelector selectedCity={selectedCity} \n                                                    setSelectedCity={setSelectedCity} \n                                                    setFetchData={setFetchData}/>\n                                        <ThemeSelector appThemes={appThemes} appTheme={appTheme} setAppTheme={setAppTheme} />\n                                    </div>\n                                    <div className=\"content-body\">\n                                        <WeatherCards key={selectedCity ? selectedCity.id : 0} apiKey={apiKey} amount={10} \n                                                    cityId={selectedCity ? selectedCity.id : 0} monthNames={monthNames}\n                                                    setSelectedCard={setSelectedCard} \n                                                    fetchData={fetchData} currentForecast={selectedCard.allInfo}/>\n                                    </div>\n                                </div>\n                            )} />\n                            <Route path={`/${appGitName}/detailed`} render={() => (\n                                <div>\n                                    <div className=\"content-header\">\n                                        <Link className=\"button with-icon\" to={`/${appGitName}`} onClick={() => setFetchData(false)}>\n                                            <VscArrowLeft/>\n                                            <span>Home</span>\n                                        </Link>\n                                        <MediaQuery minWidth={1201}>\n                                            <>{   \n                                                selectedCard && selectedCity &&\n                                                <SelectedCityDateLabel cityName={selectedCity.name} date={selectedCard.date}/>\n                                            }</>\n                                        </MediaQuery>\n                                        <ThemeSelector appThemes={appThemes} appTheme={appTheme} setAppTheme={setAppTheme} />\n                                    </div>\n                                    <div className=\"content-body\">\n                                    <MediaQuery maxWidth={1200}>\n                                        <>{\n                                            selectedCard && selectedCity &&\n                                            <SelectedCityDateLabel cityName={selectedCity.name} date={selectedCard.date} />\n                                        }</>\n                                    </MediaQuery>\n                                        <DetailedInfo forecast={selectedCard.forecast} city={selectedCity} />\n                                    </div>\n                                </div>\n                            )} />\n                        </div>\n                        <Footer/>\n                    </div>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}