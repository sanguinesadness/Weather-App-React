{"version":3,"sources":["Components/Header.jsx","Components/Footer.jsx","Components/CitySelector.jsx","Components/RadioInput.jsx","Components/ThemeSelector.jsx","Icons/test.svg","Components/WeatherCard.jsx","Components/WeatherCards.jsx","Components/DetailedCards/BriefInfoCard.jsx","Components/DetailedCards/TemperatureCard.jsx","Components/DetailedCards/WindCard.jsx","Components/DetailedCards/AirCard.jsx","Components/DetailedCards/LocationCard.jsx","Components/DetailedCards/OtherCard.jsx","Components/SelectedCityDateLabel.jsx","Components/DetailedInfo.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","monthNames","dateNow","Date","date","extractDate","time","extractTime","useState","day","setDay","month","setMonth","hours","setHours","minutes","setMinutes","dayPart","setDayPart","toLocaleTimeString","hour","minute","hoursResult","substring","charAt","minutesResult","length","getDate","getMonth","setInterval","updateDateTime","className","Footer","getFullYear","target","rel","href","CitySelector","selectedCity","setSelectedCity","setFetchData","selectorVisible","setSelectorVisible","cityList","setCityList","userInput","setUserInput","ref","wrapperRef","useRef","getCityFullname","city","name","country","state","useEffect","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","onClick","type","placeholder","value","onChange","e","inputValue","currentTarget","includes","replace","cities","filter","toLowerCase","filterCityList","trim","map","id","RadioInput","label","options","selectedOptionId","find","op","checkedOption","setCheckedOption","call","option","optionId","ThemeSelector","appThemes","appTheme","setAppTheme","radioOptions","light","dark","WeatherCard","card","setSelectedCard","appGitName","settings","to","src","forecast","weather","icon","Math","round","parseInt","temp","max","specialDayName","WeatherCards","apiKey","cityId","amount","fetchData","currentForecast","cards","setCards","loading","setLoading","fetchForecast","a","fetch","response","json","dates","getFutureDates","i","list","isDateToday","isDateTomorrow","allInfo","push","targetDate","year","setDate","today","updateWeatherCards","BriefInfo","iconId","temperature","description","toUpperCase","slice","TemperatureTable","feels_like","mobileScreen","useMediaQuery","maxWidth","morn","eve","night","WindCard","speed","direction","gust","parseFloat","toFixed","AirCard","humidity","pressure","LocationCard","longitude","latitude","OtherCard","clouds","precipitation","SelectedCityDateLabel","cityName","DetailedInfo","lowHeight","maxHeight","wideScreen","minWidth","mediumScreen","smallScreen","BriefInfoCard","TemperatureCard","coord","lon","lat","deg","pop","App","Object","freeze","selectedCard","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.53c4c3d9.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react';\r\n\r\nconst Header = ({monthNames}) => {\r\n    // initial DateTime values\r\n    let dateNow = new Date();\r\n\r\n    const date = extractDate(dateNow);\r\n    const time = extractTime(dateNow);\r\n\r\n    const [day, setDay] = useState(date.day);\r\n    const [month, setMonth] = useState(monthNames[date.month]);\r\n\r\n    const [hours, setHours] = useState(time.hours);\r\n    const [minutes, setMinutes] = useState(time.minutes);\r\n    const [dayPart, setDayPart] = useState(time.dayPart);\r\n\r\n    // update DateTime values\r\n    function updateDateTime() {\r\n        dateNow = new Date();\r\n\r\n        const date = extractDate(dateNow);\r\n        const time = extractTime(dateNow);\r\n\r\n        setDay(date.day);\r\n        setMonth(monthNames[date.month]);\r\n        setHours(time.hours);\r\n        setMinutes(time.minutes);\r\n        setDayPart(time.dayPart);\r\n    }\r\n\r\n    // extracts Time from Date object in appropriate format\r\n    function extractTime(date) {\r\n        const hours = date.toLocaleTimeString(\"en-US\", { hour: \"2-digit\"});\r\n        const minutes = date.toLocaleTimeString(\"en-US\", { minute: \"2-digit\"});\r\n\r\n        let hoursResult = hours.substring(0, 2);\r\n        if (hoursResult.charAt(0) === \"0\") {\r\n            hoursResult = hoursResult.substring(1);\r\n        }\r\n\r\n        let minutesResult = minutes;\r\n        if (minutes < 10) {\r\n            minutesResult = \"0\" + minutes;\r\n        }\r\n\r\n        const result = {\r\n            hours: hoursResult,\r\n            minutes: minutesResult,\r\n            dayPart: hours.substring(hours.length - 2)\r\n        };\r\n\r\n        return result;\r\n    }\r\n\r\n    // extracts Date from Date object in appropriate format\r\n    function extractDate(date) {\r\n        const day = date.getDate();\r\n        const month = date.getMonth();\r\n\r\n        const result = {\r\n            day: day,\r\n            month: month\r\n        };\r\n\r\n        return result;\r\n    }\r\n\r\n    // update DateTime values every 1 sec\r\n    setInterval(() => {\r\n        updateDateTime();\r\n    }, 1000);\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>10 day forecast</h1>\r\n            <h2 className=\"date-time\">\r\n                {month} {day}, {hours}<span className=\"separator\">:</span>{minutes} {dayPart}\r\n            </h2>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <h3 className=\"credits\">Rustam, {new Date().getFullYear()} &copy;</h3>\r\n            <a className=\"arrow-link underline\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/sanguinesadness/Weather-App-React\">GitHub</a>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport { useState, useEffect, useRef } from 'react'\r\nimport { BsChevronDown } from 'react-icons/bs'\r\nimport cities from '../cities.json';\r\n\r\nconst CitySelector = ({selectedCity, setSelectedCity, setFetchData}) => {\r\n    const [selectorVisible, setSelectorVisible] = useState(false);\r\n    const [cityList, setCityList] = useState([]);\r\n    const [userInput, setUserInput] = useState('');\r\n\r\n    function useOutsideAlerter(ref) {\r\n        useEffect(() => {\r\n            // if clicked on outside of element\r\n            function handleClickOutside(event) {\r\n                if (ref.current && !ref.current.contains(event.target)) {\r\n                    setSelectorVisible(false);\r\n                }\r\n            }\r\n    \r\n            // bind the event listener\r\n            document.addEventListener(\"click\", handleClickOutside);\r\n            return () => {\r\n                // unbind the event listener on clean up\r\n                document.removeEventListener(\"click\", handleClickOutside);\r\n            };\r\n        }, [ref]);\r\n    }\r\n\r\n    const wrapperRef = useRef(null);\r\n    useOutsideAlerter(wrapperRef);\r\n\r\n    function filterCityList(userInput) {\r\n        if (!userInput || userInput.length < 3) {\r\n            return;\r\n        }\r\n\r\n        setCityList(cities.filter(city => city.name.toLowerCase().includes(userInput.toLowerCase())));\r\n    }\r\n\r\n    function getCityFullname(city) {\r\n        return `${city.name}, ${city.country}${city.state ? ', ' + city.state : ''}`;\r\n    }\r\n\r\n    return (\r\n        <div className=\"city-selector\" ref={wrapperRef}>\r\n            <div className=\"selected-city active button with-icon\" onClick={() => setSelectorVisible(!selectorVisible)}>\r\n                <BsChevronDown/>\r\n                <span>{selectedCity ? getCityFullname(selectedCity) : \"No city selected\"}</span>\r\n            </div>\r\n            {selectorVisible ?\r\n                <div className=\"selector\">\r\n                    <input type=\"text\" placeholder=\"Find City\" \r\n                            value={userInput}\r\n                            onChange={(e) => {\r\n                                let inputValue = e.currentTarget.value;\r\n\r\n                                // prevent double space input\r\n                                while (inputValue.includes(\"  \"))\r\n                                {\r\n                                    inputValue = inputValue.replace(\"  \", \" \");\r\n                                }\r\n\r\n                                filterCityList(inputValue.trim());\r\n                                setUserInput(inputValue);\r\n                            }}/>\r\n                    <div className=\"city-list__wrapper\">\r\n                        <div className=\"city-list\">\r\n                            {\r\n                                cityList.length > 0 ? cityList.map(city =>\r\n                                    <span className={selectedCity && selectedCity.id === city.id ? \"city selected\" : \"city\"}\r\n                                          key={city.id} \r\n                                          onClick={() => {\r\n                                              setSelectedCity(city);\r\n                                              setSelectorVisible(false);\r\n                                              setFetchData(true)}}>\r\n                                        {getCityFullname(city)}\r\n                                    </span>\r\n                                )\r\n                                : <span className=\"city-list-message\">\r\n                                    {userInput.length == 0 ? \"Empty input\" :\r\n                                        userInput.length < 3 ? \"3 characters min\" :\r\n                                            \"Not found\"}\r\n                                </span>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <></>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CitySelector\r\n","import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\n\r\nconst RadioInput = ({ label, options, selectedOptionId, className, onChange }) => {\r\n    const [checkedOption, setCheckedOption] = useState(options.find(op => op.id === selectedOptionId));\r\n\r\n    const isOptionChecked = (optionId) => checkedOption.id === optionId;\r\n\r\n    useEffect(() => {\r\n        onChange?.call(null, checkedOption.value);\r\n    }, [checkedOption]);\r\n\r\n    return (\r\n        <div className={`radio-input ${className}`}>\r\n            {\r\n                label ?\r\n                    <span className=\"label\">{label}</span>\r\n                    :\r\n                    <></>\r\n            }\r\n            <div className=\"radio-options\">\r\n                {\r\n                    options.map(option => (\r\n                        <div key={option.id} \r\n                             className={`radio-option ${isOptionChecked(option.id) ? \"checked\" : \"\"}`}\r\n                             onClick={() => setCheckedOption(option)}>\r\n                            {option.name}\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RadioInput\r\n","import React from 'react'\r\nimport RadioInput from './RadioInput';\r\n\r\nconst ThemeSelector = ({ appThemes, appTheme, setAppTheme }) => {\r\n    const radioOptions = [\r\n        { id: appThemes.light, name: \"Light\", value: appThemes.light },\r\n        { id: appThemes.dark, name: \"Dark\", value: appThemes.dark }\r\n    ];\r\n\r\n    return (\r\n        <div className=\"theme-selector\">\r\n            <RadioInput label=\"Style:\" \r\n                        options={radioOptions}\r\n                        selectedOptionId={appTheme}\r\n                        className=\"theme-radio-input\"\r\n                        onChange={(value) => setAppTheme(value)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThemeSelector\r\n","export default __webpack_public_path__ + \"static/media/test.12f45a7b.svg\";","import React from 'react'\r\nimport testIcon from '../Icons/test.svg'\r\nimport settings from '../../package.json'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst WeatherCard = ({ card, setSelectedCard }) => {\r\n    const appGitName = settings['git-name'];\r\n\r\n    return (\r\n        <Link to={`/${appGitName}/detailed`} className=\"weather-card card\" onClick={() => setSelectedCard(card)}>\r\n            <img className=\"icon\" src={`http://openweathermap.org/img/wn/${card.forecast.weather[0].icon}@4x.png`}></img>\r\n            <span className=\"info\">\r\n                <span className=\"temperature\">{Math.round(parseInt(card.forecast.temp.max))}</span>\r\n                <span className=\"day\">\r\n                    {card.specialDayName ? card.specialDayName : `${card.date.day} ${card.date.month}`}\r\n                </span>\r\n            </span>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default WeatherCard\r\n","import React from 'react'\r\nimport WeatherCard from './WeatherCard'\r\nimport ReactLoading from 'react-loading'\r\nimport { useState, useEffect } from 'react';\r\nimport { BsFillInfoSquareFill } from 'react-icons/bs'\r\n\r\nconst WeatherCards = ({apiKey, cityId, amount, monthNames, setSelectedCard, fetchData, currentForecast}) => {\r\n    if (amount < 1) {\r\n        amount = 1;\r\n    }\r\n    else if (amount > 16) {\r\n        amount = 16;\r\n    }\r\n\r\n    const [cards, setCards] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (cityId > 0) {\r\n            updateWeatherCards()\r\n        }\r\n    }, []);\r\n\r\n    // get Forecast from OpenWeatherMap API\r\n    async function fetchForecast() {\r\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast/daily?id=${cityId}&units=metric&cnt=${amount}&appid=${apiKey}`);\r\n        return response.json();\r\n    }\r\n\r\n    async function updateWeatherCards() {\r\n        let forecast;\r\n\r\n        // if fetch is not needed then use current forecast info\r\n        if (!fetchData && currentForecast) {\r\n            forecast = currentForecast;\r\n        }\r\n        else {\r\n            try {\r\n                forecast = await fetchForecast();\r\n            }\r\n            catch(exception) {\r\n                setCards(null);\r\n                return;\r\n            }\r\n        }\r\n\r\n        const cards = [];\r\n        const dates = getFutureDates();\r\n\r\n        for (let i = 0; i < amount; i++) {\r\n            const card = {\r\n                id: i,\r\n                date: dates[i],\r\n                forecast: forecast.list[i],\r\n                specialDayName: isDateToday(dates[i]) ? \"Today\" : isDateTomorrow(dates[i]) ? \"Tomorrow\" : \"\",\r\n                allInfo: forecast\r\n            };\r\n\r\n            cards.push(card);\r\n        }\r\n\r\n        setCards(cards);\r\n        setLoading(false);\r\n    }\r\n\r\n    function getFutureDates() {\r\n        var targetDate = new Date();\r\n\r\n        const dates = [];\r\n\r\n        for (let i = 0; i < amount; i++) {\r\n            const date = {\r\n                day: targetDate.getDate(),\r\n                month: monthNames[targetDate.getMonth()],\r\n                year: targetDate.getFullYear()\r\n            };\r\n\r\n            dates.push(date);\r\n\r\n            targetDate.setDate(targetDate.getDate() + 1);\r\n        }\r\n\r\n        return dates;\r\n    }\r\n\r\n    function isDateToday(date) {\r\n        const today = new Date();\r\n\r\n        const day = today.getDate();\r\n        const month = monthNames[today.getMonth()];\r\n        const year = today.getFullYear();\r\n\r\n        return day === date.day && month === date.month && year == date.year;\r\n    }\r\n\r\n    function isDateTomorrow(date) {\r\n        const today = new Date();\r\n        today.setDate(today.getDate() + 1);\r\n\r\n        const day = today.getDate();\r\n        const month = monthNames[today.getMonth()];\r\n        const year = today.getFullYear();\r\n\r\n        return day === date.day && month === date.month && year == date.year;\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather-cards__wrapper\">\r\n            {\r\n                cityId <= 0 ?\r\n                <div className=\"select-city-message\">\r\n                    <BsFillInfoSquareFill className=\"icon\"/>\r\n                    <span className=\"text\">Select a city to view weather forecast.</span>\r\n                </div>\r\n                : !cards ?\r\n                <div className=\"error-message\">\r\n                    <BsFillInfoSquareFill className=\"icon\"/>\r\n                    <span className=\"text\">\r\n                        Unknown error thrown.\r\n                        <br/>\r\n                        Please check your Internet connection and try again.\r\n                    </span>\r\n                </div>\r\n                : loading ? \r\n                <ReactLoading type=\"bars\" className=\"loading-spinner\"/>\r\n                :\r\n                <div className=\"weather-cards\">\r\n                    {\r\n                        cards.map(card =>\r\n                            <WeatherCard key={card.id} card={card} setSelectedCard={setSelectedCard}/>\r\n                        )\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherCards\r\n","import React from 'react'\r\n\r\nconst BriefInfo = ({iconId, temperature, description}) => {\r\n    return (\r\n        <div className=\"brief-info card no-hover\">\r\n            <img className=\"icon\" src={`http://openweathermap.org/img/wn/${iconId}@4x.png`}></img>\r\n            <span className=\"info\">\r\n                <span className=\"temp-block\">\r\n                    <span className=\"temperature\">{temperature}</span>\r\n                    <span className=\"info-label\">max</span>\r\n                </span>\r\n                <span className=\"description\">{description.charAt(0).toUpperCase() + description.slice(1)}</span>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BriefInfo\r\n","import React from 'react'\r\nimport { FiSunrise, FiSun, FiSunset, FiMoon } from 'react-icons/fi'\r\nimport MediaQuery, { useMediaQuery } from 'react-responsive'\r\n\r\nconst TemperatureTable = ({temp, feels_like}) => {\r\n    const mobileScreen = useMediaQuery({ maxWidth: 630 });\r\n\r\n    return (\r\n        <div className=\"temperature-info card no-hover\">\r\n            <table className=\"temperature-table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>Temp{mobileScreen ? \"\" : \", °C\"}</th>\r\n                        <th>Feel{mobileScreen ? \"\" : \"s like, °C\"}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"with-icon\">\r\n                            <FiSunrise/>\r\n                            <span>Morning</span>\r\n                        </td>\r\n                        <td>{parseInt(temp.morn)}</td>\r\n                        <td>{parseInt(feels_like.morn)}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"with-icon\">\r\n                            <FiSun/>\r\n                            <span>Day</span>\r\n                        </td>\r\n                        <td>{parseInt(temp.day)}</td>\r\n                        <td>{parseInt(feels_like.day)}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"with-icon\">\r\n                            <FiSunset/>\r\n                            <span>Evening</span>\r\n                        </td>\r\n                        <td>{parseInt(temp.eve)}</td>\r\n                        <td>{parseInt(feels_like.eve)}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"with-icon\">\r\n                            <FiMoon/>\r\n                            <span>Night</span>\r\n                        </td>\r\n                        <td>{parseInt(temp.night)}</td>\r\n                        <td>{parseInt(feels_like.night)}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TemperatureTable\r\n","import React from 'react'\r\n\r\nconst WindCard = ({ speed, direction, gust }) => {\r\n    return (\r\n        <div className=\"wind-info card no-hover\">\r\n            <span className=\"card-title\">Wind</span>\r\n            <table className=\"without-border\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>Speed:</td>\r\n                        <td>{parseFloat(speed).toFixed(2)} m/sec</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Direction:</td>\r\n                        <td>{parseInt(direction)} °</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Gust:</td>\r\n                        <td>{parseFloat(gust).toFixed(2)} m/sec</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WindCard\r\n","import React from 'react'\r\n\r\nconst AirCard = ({ humidity, pressure }) => {\r\n    return (\r\n        <div className=\"air-info card no-hover\">\r\n            <span className=\"card-title\">Air</span>\r\n            <table className=\"without-border\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>Humidity:</td>\r\n                        <td>{parseInt(humidity)}%</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Pressure:</td>\r\n                        <td>{parseFloat(pressure)} hPA</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AirCard\r\n","import React from 'react'\r\n\r\nconst LocationCard = ({ longitude, latitude }) => {\r\n    return (\r\n        <div className=\"location-info card no-hover\">\r\n            <span className=\"card-title\">Location</span>\r\n            <table className=\"without-border\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>Longitude:</td>\r\n                        <td>{parseFloat(longitude).toFixed(4)}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Latitude:</td>\r\n                        <td>{parseFloat(latitude).toFixed(4)}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationCard","import React from 'react'\r\n\r\nconst OtherCard = ({ clouds, precipitation }) => {\r\n    return (\r\n        <div className=\"other-info card no-hover\">\r\n            <span className=\"card-title\">Other</span>\r\n            <table className=\"without-border\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>Clouds:</td>\r\n                        <td>{parseInt(clouds)}%</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Precipitation:</td>\r\n                        <td>{parseInt(precipitation * 100)}%</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OtherCard\r\n","import React from 'react'\r\n\r\nconst SelectedCityDateLabel = ({ cityName, date }) => {\r\n    return (\r\n        <h4 className=\"selected-city-date\">\r\n            <span className=\"city-name\">\r\n                {cityName ? cityName : \"No city selected\"}\r\n            </span>\r\n            <span className=\"separator\"> — </span>\r\n            <span className=\"date\">\r\n                {date ? `${date.month} ${date.day}, ${date.year}` : \"No card selected\"}\r\n            </span>\r\n        </h4>\r\n    )\r\n}\r\n\r\nexport default SelectedCityDateLabel\r\n","import React from 'react'\r\nimport BriefInfoCard from './DetailedCards/BriefInfoCard'\r\nimport TemperatureCard from './DetailedCards/TemperatureCard'\r\nimport WindCard from './DetailedCards/WindCard'\r\nimport AirCard from './DetailedCards/AirCard'\r\nimport LocationCard from './DetailedCards/LocationCard'\r\nimport OtherCard from './DetailedCards/OtherCard'\r\nimport SelectedCityDateLabel from './SelectedCityDateLabel'\r\nimport { BsFillInfoSquareFill } from 'react-icons/bs'\r\nimport MediaQuery, { useMediaQuery } from 'react-responsive'\r\n\r\nconst DetailedInfo = ({ forecast, city }) => {\r\n    const lowHeight = useMediaQuery({ maxHeight: 820 });\r\n    const wideScreen = useMediaQuery({ minWidth: 980 });\r\n    const mediumScreen = useMediaQuery({ minWidth: 891, maxWidth: 979 });\r\n    const smallScreen = useMediaQuery({ maxWidth: 890 });\r\n\r\n    return (\r\n        <div className=\"detailed-info__wrapper\">\r\n            {   \r\n                forecast && city ?\r\n                <div className=\"detailed-info\">\r\n                    {\r\n                        lowHeight && wideScreen ?\r\n                        <>\r\n                            <div className=\"one-element-row\">\r\n                                <BriefInfoCard iconId={forecast.weather[0].icon}\r\n                                    temperature={Math.round(parseInt(forecast.temp.max))}\r\n                                    description={forecast.weather[0].description} />\r\n                                <TemperatureCard temp={forecast.temp} feels_like={forecast.feels_like} />\r\n                                <AirCard humidity={forecast.humidity} pressure={forecast.pressure} />\r\n                                <LocationCard longitude={city.coord.lon} latitude={city.coord.lat} />\r\n                                <WindCard speed={forecast.speed} direction={forecast.deg} gust={forecast.gust} />\r\n                                <OtherCard clouds={forecast.clouds} precipitation={forecast.pop} />\r\n                            </div>\r\n                        </>\r\n                        : wideScreen ?\r\n                        <>\r\n                            <div className=\"first row\">\r\n                                <BriefInfoCard iconId={forecast.weather[0].icon}\r\n                                    temperature={Math.round(parseInt(forecast.temp.max))}\r\n                                    description={forecast.weather[0].description} />\r\n                                <TemperatureCard temp={forecast.temp} feels_like={forecast.feels_like} />\r\n                                <WindCard speed={forecast.speed} direction={forecast.deg} gust={forecast.gust} />\r\n                            </div>\r\n                            <div className=\"second row\">\r\n                                <AirCard humidity={forecast.humidity} pressure={forecast.pressure} />\r\n                                <LocationCard longitude={city.coord.lon} latitude={city.coord.lat} />\r\n                                <OtherCard clouds={forecast.clouds} precipitation={forecast.pop} />\r\n                            </div>\r\n                        </>\r\n                        : mediumScreen ?\r\n                        <>\r\n                            <div className=\"first row\">\r\n                                <BriefInfoCard iconId={forecast.weather[0].icon}\r\n                                    temperature={Math.round(parseInt(forecast.temp.max))}\r\n                                    description={forecast.weather[0].description} />\r\n                                <TemperatureCard temp={forecast.temp} feels_like={forecast.feels_like} />\r\n                            </div>\r\n                            <div className=\"second row\">\r\n                                <AirCard humidity={forecast.humidity} pressure={forecast.pressure} />\r\n                                <LocationCard longitude={city.coord.lon} latitude={city.coord.lat} />\r\n                            </div>\r\n                            <div className=\"third row\">\r\n                                <WindCard speed={forecast.speed} direction={forecast.deg} gust={forecast.gust} />\r\n                                <OtherCard clouds={forecast.clouds} precipitation={forecast.pop} />\r\n                            </div>\r\n                        </>\r\n                        : smallScreen ?\r\n                        <div className=\"one-element-list\">\r\n                            <BriefInfoCard iconId={forecast.weather[0].icon}\r\n                                temperature={Math.round(parseInt(forecast.temp.max))}\r\n                                description={forecast.weather[0].description} />\r\n                            <TemperatureCard temp={forecast.temp} feels_like={forecast.feels_like} />\r\n                            <AirCard humidity={forecast.humidity} pressure={forecast.pressure} />\r\n                            <LocationCard longitude={city.coord.lon} latitude={city.coord.lat} />\r\n                            <WindCard speed={forecast.speed} direction={forecast.deg} gust={forecast.gust} />\r\n                            <OtherCard clouds={forecast.clouds} precipitation={forecast.pop} />\r\n                        </div>\r\n                        : lowHeight ?\r\n                        <>\r\n                            <div className=\"one-element-row\">\r\n                                <BriefInfoCard iconId={forecast.weather[0].icon}\r\n                                    temperature={Math.round(parseInt(forecast.temp.max))}\r\n                                    description={forecast.weather[0].description} />\r\n                                <TemperatureCard temp={forecast.temp} feels_like={forecast.feels_like} />\r\n                                <AirCard humidity={forecast.humidity} pressure={forecast.pressure} />\r\n                                <LocationCard longitude={city.coord.lon} latitude={city.coord.lat} />\r\n                                <WindCard speed={forecast.speed} direction={forecast.deg} gust={forecast.gust} />\r\n                                <OtherCard clouds={forecast.clouds} precipitation={forecast.pop} />\r\n                            </div>\r\n                        </>\r\n                        :\r\n                        <p>Unknown display size</p>\r\n                    }\r\n                </div>\r\n                :\r\n                <div className=\"error-message\">\r\n                    <BsFillInfoSquareFill className=\"icon\"/>\r\n                    <span className=\"text\">\r\n                        It seems that you didn't select the city and the day!\r\n                        <br/>\r\n                        Please go Home and do it.\r\n                    </span>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailedInfo\r\n","import './Styles/style.css'\r\nimport Header from './Components/Header';\r\nimport Footer from './Components/Footer';\r\nimport CitySelector from './Components/CitySelector';\r\nimport ThemeSelector from './Components/ThemeSelector';\r\nimport WeatherCards from './Components/WeatherCards';\r\nimport DetailedInfo from './Components/DetailedInfo';\r\nimport SelectedCityDateLabel from './Components/SelectedCityDateLabel';\r\nimport MediaQuery from 'react-responsive';\r\nimport { useState } from 'react'\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport { VscArrowLeft } from 'react-icons/vsc'\r\nimport settings from '../package.json'\r\n\r\nfunction App() {\r\n    // OpenWeather API key\r\n    const apiKey = \"ee8f5e36161b13d12b0e5044d2bbc117\";\r\n\r\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n    const appThemes = Object.freeze({\r\n        light: \"light-theme\",\r\n        dark: \"dark-theme\"\r\n    });\r\n\r\n    const appGitName = settings['git-name'];\r\n\r\n    const [selectedCity, setSelectedCity] = useState();\r\n    const [appTheme, setAppTheme] = useState(appThemes.light);\r\n    const [selectedCard, setSelectedCard] = useState([]);\r\n\r\n    // indicates whether resubmission API request is needed or not\r\n    const [fetchData, setFetchData] = useState(true);\r\n\r\n    return (\r\n        <Router>\r\n            <div className={`main-wrapper ${appTheme}`}>\r\n                <div className=\"container__wrapper\">\r\n                    <div className=\"container\">\r\n                        <Header monthNames={monthNames}/>\r\n                        <div className=\"content\">\r\n                            <Route path={`/${appGitName}`} exact render={() => (\r\n                                <div>\r\n                                    <div className=\"content-header\">\r\n                                        <CitySelector selectedCity={selectedCity} \r\n                                                    setSelectedCity={setSelectedCity} \r\n                                                    setFetchData={setFetchData}/>\r\n                                        <ThemeSelector appThemes={appThemes} appTheme={appTheme} setAppTheme={setAppTheme} />\r\n                                    </div>\r\n                                    <div className=\"content-body\">\r\n                                        <WeatherCards key={selectedCity ? selectedCity.id : 0} apiKey={apiKey} amount={10} \r\n                                                    cityId={selectedCity ? selectedCity.id : 0} monthNames={monthNames}\r\n                                                    setSelectedCard={setSelectedCard} \r\n                                                    fetchData={fetchData} currentForecast={selectedCard.allInfo}/>\r\n                                    </div>\r\n                                </div>\r\n                            )} />\r\n                            <Route path={`/${appGitName}/detailed`} render={() => (\r\n                                <div>\r\n                                    <div className=\"content-header\">\r\n                                        <Link className=\"button with-icon\" to={`/${appGitName}`} onClick={() => setFetchData(false)}>\r\n                                            <VscArrowLeft/>\r\n                                            <span>Home</span>\r\n                                        </Link>\r\n                                        <MediaQuery minWidth={1201}>\r\n                                            <>{   \r\n                                                selectedCard && selectedCity &&\r\n                                                <SelectedCityDateLabel cityName={selectedCity.name} date={selectedCard.date}/>\r\n                                            }</>\r\n                                        </MediaQuery>\r\n                                        <ThemeSelector appThemes={appThemes} appTheme={appTheme} setAppTheme={setAppTheme} />\r\n                                    </div>\r\n                                    <div className=\"content-body\">\r\n                                    <MediaQuery maxWidth={1200}>\r\n                                        <>{\r\n                                            selectedCard && selectedCity &&\r\n                                            <SelectedCityDateLabel cityName={selectedCity.name} date={selectedCard.date} />\r\n                                        }</>\r\n                                    </MediaQuery>\r\n                                        <DetailedInfo forecast={selectedCard.forecast} city={selectedCity} />\r\n                                    </div>\r\n                                </div>\r\n                            )} />\r\n                        </div>\r\n                        <Footer/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}